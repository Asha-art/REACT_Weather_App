{"version":3,"sources":["components/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["Forecast","props","className","city","country","time","temperature","icon","description","Low","High","humidity","App","state","error","getWeather","e","a","zipcode","target","elements","value","preventDefault","fetch","api_call","json","response","console","log","cod","setState","Math","round","main","temp","name","sys","Moment","utcOffset","timezone","format","temp_min","temp_max","weather","alert","loadWeather","this","src","React","Component","Heading","Form","onSubmit","type","placeholder","checked","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.80a19aa2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Forecast = (props) => {\r\n    return (\r\n        <div >\r\n            <p className=\"city\">{props.city}{\"   \"}{props.country} {\"   \"} {props.time}</p>\r\n            <p className=\"temp\">{props.temperature}{props.icon}\r\n                {/* <img src={` http://openweathermap.org/img/w/${props.icon}`} /> */}\r\n                <span className=\"desc\">{props.description}</span></p>\r\n            <p><span className=\"low\">{props.Low}</span>\r\n                <span className=\"high\"> {props.High}</span>\r\n                <span className=\"humidity\">{props.humidity}</span>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\nexport default Forecast;","import React from 'react';\nimport './App.css';\nimport Forecast from \"./components/Forecast\";\nimport Moment from \"moment\";\nimport \"moment-timezone\";\n\n\n\nclass App extends React.Component {\n  state = {\n    temperature: \" \",\n    city: \" \",\n    country: \" \",\n    time: \" \",\n    humidity: \" \",\n    Low: \" \",\n    High: \" \",\n    icon: \" \",\n    description: \"\",\n    error: \"\"\n  }\n\n  getWeather = async (e) => {\n    const zipcode = e.target.elements.zipcode.value;\n    e.preventDefault();\n\n    // let degUnit = null;\n    // if (document.getElementById(\"imperial\").checked) {\n    //   degUnit = \"imperial\";\n    // } else {\n    //   degUnit = \"metric\";\n    // }\n\n    const api_call = await fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\" +\n      zipcode + \",us&units=imperial&appid=\" + process.env.REACT_APP_WEATHER_API_KEY)\n\n    const response = await api_call.json();\n    console.log(response.cod);\n\n\n    if (zipcode) {\n      this.setState({\n        temperature: Math.round(response.main.temp) + \"°F\",\n        city: response.name + \",\",\n        country: response.sys.country + \" | \",\n        time: Moment().utcOffset(response.timezone / 60).format(\"dddd, MMMM Do YYYY |  h:mm A\"),\n        humidity: \"Humidity: \" + response.main.humidity + \"%\",\n        Low: \"Low: \" + Math.round(response.main.temp_min) + \"°F\",\n        High: \"High: \" + Math.round(response.main.temp_max) + \"°F\",\n        icon: response.weather[0].icon,\n        description: response.weather[0].description,\n        error: \"\"\n      })\n    } else {\n      this.setState({\n        error: alert(\"Please Enter the zipcode ... \")\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n\n        <Heading />\n\n        <div className=\"form\">\n          <Form loadWeather={this.getWeather} />   {/* get information from Form and bring it into the render */}\n        </div>\n\n        <div className=\"weather\">\n          <Forecast\n            temperature={this.state.temperature}\n            city={this.state.city}\n            country={this.state.country}\n            time={this.state.time}\n            humidity={this.state.humidity}\n            Low={this.state.Low}\n            High={this.state.High}\n            icon={<img src={` https://openweathermap.org/img/wn/${this.state.icon}` + \".png\"} />}\n            description={this.state.description}\n            error={this.state.error}\n          />\n        </div>\n      </div >\n    )\n  }\n}\nexport default App;\n\n// Heading\nconst Heading = (props) => {\n  return (\n    <div>\n      <h3> Check the weather condition in your city</h3>\n    </div>\n  )\n}\n//form\nconst Form = (props) => {\n\n  return (\n    <form onSubmit={props.loadWeather}>\n      <input type=\"text \" name=\"zipcode\" placeholder=\"Enter the zipcode\" />\n      <button>Get Weather</button>\n\n      <p > <label>\n        <input className=\"radio\"\n          type=\"radio\"\n          name=\"units\"\n          checked='imperial'\n          value=\"imperial\"\n        />Fahrenheit\n        </label>\n\n        <label>\n          <input className=\"radio\"\n            type=\"radio\"\n            name=\"units\"\n            value=\"metric\"\n          /> Celcius\n          </label>\n      </p>\n\n    </form >\n  )\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// // //Zach's code\n// import React from \"react\";\n// import Moment from \"moment\";\n// import \"moment-timezone\";\n// import tz from \"zipcode-to-timezone\";\n// import \"./App.css\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n\n// const APP_KEY = \"appid=0e715fd6e4dd427ee64eeda6aab95586\";\n\n// class App extends React.Component {\n//   state = {};\n\n//   getTime = () => {\n//     let timeZone = tz.lookup(this.state.zip);\n//     let time = Moment().tz(timeZone).format(\"dddd, MMMM Do YYYY, h:mm:ss a\");\n\n//     this.setState({\n//       currentTime: time,\n//     });\n//   };\n\n//   weather = () => {\n//     let zip = document.getElementById(\"zipcode\").value;\n\n//     fetch(\n//       \"http://api.openweathermap.org/data/2.5/weather?zip=\" +\n//       zip +\n//       \",us\" +\n//       \"&units=imperial&\" +\n//       APP_KEY\n//     )\n//       .then((response) => {\n//         if (response.status !== 200) {\n//           console.log(\n//             \"Looks like there was a problem. Status Code: \" + response.status\n//           );\n//           return;\n//         }\n\n//         // Examine the text in the response\n//         response.json().then((data) => {\n//           console.log(data);\n//           this.setState({\n//             zip: zip,\n//             city: data.name,\n//             forecast: data.weather[0].main,\n//             temp: data.main.temp,\n\n//           });\n\n//           this.refs.clear.value = \"\";\n\n//           this.getTime();\n//         });\n//       })\n//       .catch(function (err) {\n//         console.log(\"Fetch Error :-S\", err);\n//       });\n//   };\n\n//   render() {\n//     return (\n//       <React.Fragment>\n//         <div className=\"container\">\n//           <div className=\"row\">\n//             <div className=\"h3\">\n//               <h3>Get the weather forecast in your city</h3>\n\n//               <div onClick={this.weather}>\n//                 <input type=\"text\" id=\"zipcode\" ref=\"clear\" />\n//                 <button>Get Weather</button>\n//               </div>\n//               <div>\n//                 <h3>{this.state.currentTime}</h3>\n//                 <span>{this.state.city}</span>\n//                 <br />\n//                 <span>{this.state.forecast}</span>\n//                 <br />\n//                 <span> {Math.round(this.state.temp)} </span>\n//                 <br />\n\n//                 <br />\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </React.Fragment>\n//     );\n//   }\n// }\n\n// export default App;\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}